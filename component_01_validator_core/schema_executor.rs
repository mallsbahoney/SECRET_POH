
pub mod schema_executor {
    use std::collections::HashMap;
    use crate::component_01_validator_core::*;

    #[derive(Debug)]
    pub enum ActionType {
        Batchsend,
        Burn,
        Callapp,
        Compute,
        Condition,
        Conditionvaultlock,
        Conditionlock,
        Createapp,
        Createappbalance,
        Createcustomnativewalletbalance,
        Createdilithium3signature,
        Createdilithium5signature,
        Createdummywallet,
        Createhtlc,
        Createkey,
        Createnativeadawalletbalance,
        Createnativebtcwalletbalance,
        Createnativeethwalletbalance,
        Createnativesolwalletbalance,
        Createnativesuiwalletbalance,
        Createsha256hash,
        Createsha3hash,
        Declareschema,
        Decryptwithkey,
        Delete,
        Emitevent,
        Encryptwithexistingkey,
        Encryptwithnewkey,
        Externaldataread,
        Externaldatasend,
        Getkeyvalue,
        Grantaccess,
        Logstate,
        Match,
        Mint,
        Parallellink,
        Partialvaultunlock,
        Randomize,
        Reflectvalue,
        Revokeaccess,
        Send,
        Sendmessage,
        Sequencelink,
        Storekeyvalue,
        Swap,
        Time,
        Timedvaultlock,
        Timelock,
        Triggercustomnativewalletbalance,
        Triggernativeadawalletbalance,
        Triggernativebtcwalletbalance,
        Triggernativeethwalletbalance,
        Triggernativesolwalletbalance,
        Triggernativesuiwalletbalance,
        Unlockhtlc,
        Update,
        Updateappbalance,
        Vault,
        Vaultunlock,
        Verifydilithium3signature,
        Verifydilithium5signature,
        Verifyexternaldata,
        Verifysha256hash,
        Verifysha3hash,
        Walletlinked,
        Watch,
        Pinschema,
        Applaunch,
        Statesnapshot,
        Crosschainbundle,
        Confirmtxinchain,
        Paywallunlock,
        Percenttokensplit,
        Holdingtokensplit,
        Schemavote,
        Trustgrouptrigger,
        Failover,
        Maxuseschema,
        Expiryschema,
        Loopwhile,
        Delay,
        Schemagrantaccess,
        Schemagroup,
        Externalconfirm,
        Conditiononapikeygroup,
        Createapikeyrecord,
        Votetrigger,
        Reputationlock,
        Tagschemawithapikey,
        Multiconditiontimelock,
        Webtasktrigger,
        Triggerwebhook,
        Biometricunlock,
        Appbuy,
        Appsell,
        Appswap,
        Fixedintervalbuy,
        Fixedintervalsell,
        Conditionalsell,
        Conditionalbuy,
        Createfungibleapptoken,
        Createnonfungibleapptoken,
        Createtokenliquiditypot,
        Createbalanceliquiditypot,
        Createappliquiditypot,
        Createdecentralizedexchangeapp,
        Createcentralizedexchangeapp,
        Numerousownersequal,
        Numerousownersvaried,
        Cancelcondition,
        Internalread,
        Copy,
        Paste,
        Unknown,
    }

    impl ActionType {
        pub fn from_str(name: &str) -> Self {
            match name.to_lowercase().as_str() {
                "batchsend" => ActionType::Batchsend,
                "burn" => ActionType::Burn,
                "callapp" => ActionType::Callapp,
                "compute" => ActionType::Compute,
                "condition" => ActionType::Condition,
                "conditionvaultlock" => ActionType::Conditionvaultlock,
                "conditionlock" => ActionType::Conditionlock,
                "createapp" => ActionType::Createapp,
                "createappbalance" => ActionType::Createappbalance,
                "createcustomnativewalletbalance" => ActionType::Createcustomnativewalletbalance,
                "createdilithium3signature" => ActionType::Createdilithium3signature,
                "createdilithium5signature" => ActionType::Createdilithium5signature,
                "createdummywallet" => ActionType::Createdummywallet,
                "createhtlc" => ActionType::Createhtlc,
                "createkey" => ActionType::Createkey,
                "createnativeadawalletbalance" => ActionType::Createnativeadawalletbalance,
                "createnativebtcwalletbalance" => ActionType::Createnativebtcwalletbalance,
                "createnativeethwalletbalance" => ActionType::Createnativeethwalletbalance,
                "createnativesolwalletbalance" => ActionType::Createnativesolwalletbalance,
                "createnativesuiwalletbalance" => ActionType::Createnativesuiwalletbalance,
                "createsha256hash" => ActionType::Createsha256hash,
                "createsha3hash" => ActionType::Createsha3hash,
                "declareschema" => ActionType::Declareschema,
                "decryptwithkey" => ActionType::Decryptwithkey,
                "delete" => ActionType::Delete,
                "emitevent" => ActionType::Emitevent,
                "encryptwithexistingkey" => ActionType::Encryptwithexistingkey,
                "encryptwithnewkey" => ActionType::Encryptwithnewkey,
                "externaldataread" => ActionType::Externaldataread,
                "externaldatasend" => ActionType::Externaldatasend,
                "getkeyvalue" => ActionType::Getkeyvalue,
                "grantaccess" => ActionType::Grantaccess,
                "logstate" => ActionType::Logstate,
                "match" => ActionType::Match,
                "mint" => ActionType::Mint,
                "parallellink" => ActionType::Parallellink,
                "partialvaultunlock" => ActionType::Partialvaultunlock,
                "randomize" => ActionType::Randomize,
                "reflectvalue" => ActionType::Reflectvalue,
                "revokeaccess" => ActionType::Revokeaccess,
                "send" => ActionType::Send,
                "sendmessage" => ActionType::Sendmessage,
                "sequencelink" => ActionType::Sequencelink,
                "storekeyvalue" => ActionType::Storekeyvalue,
                "swap" => ActionType::Swap,
                "time" => ActionType::Time,
                "timedvaultlock" => ActionType::Timedvaultlock,
                "timelock" => ActionType::Timelock,
                "triggercustomnativewalletbalance" => ActionType::Triggercustomnativewalletbalance,
                "triggernativeadawalletbalance" => ActionType::Triggernativeadawalletbalance,
                "triggernativebtcwalletbalance" => ActionType::Triggernativebtcwalletbalance,
                "triggernativeethwalletbalance" => ActionType::Triggernativeethwalletbalance,
                "triggernativesolwalletbalance" => ActionType::Triggernativesolwalletbalance,
                "triggernativesuiwalletbalance" => ActionType::Triggernativesuiwalletbalance,
                "unlockhtlc" => ActionType::Unlockhtlc,
                "update" => ActionType::Update,
                "updateappbalance" => ActionType::Updateappbalance,
                "vault" => ActionType::Vault,
                "vaultunlock" => ActionType::Vaultunlock,
                "verifydilithium3signature" => ActionType::Verifydilithium3signature,
                "verifydilithium5signature" => ActionType::Verifydilithium5signature,
                "verifyexternaldata" => ActionType::Verifyexternaldata,
                "verifysha256hash" => ActionType::Verifysha256hash,
                "verifysha3hash" => ActionType::Verifysha3hash,
                "walletlinked" => ActionType::Walletlinked,
                "watch" => ActionType::Watch,
                "pinschema" => ActionType::Pinschema,
                "applaunch" => ActionType::Applaunch,
                "statesnapshot" => ActionType::Statesnapshot,
                "crosschainbundle" => ActionType::Crosschainbundle,
                "confirmtxinchain" => ActionType::Confirmtxinchain,
                "paywallunlock" => ActionType::Paywallunlock,
                "percenttokensplit" => ActionType::Percenttokensplit,
                "holdingtokensplit" => ActionType::Holdingtokensplit,
                "schemavote" => ActionType::Schemavote,
                "trustgrouptrigger" => ActionType::Trustgrouptrigger,
                "failover" => ActionType::Failover,
                "maxuseschema" => ActionType::Maxuseschema,
                "expiryschema" => ActionType::Expiryschema,
                "loopwhile" => ActionType::Loopwhile,
                "delay" => ActionType::Delay,
                "schemagrantaccess" => ActionType::Schemagrantaccess,
                "schemagroup" => ActionType::Schemagroup,
                "externalconfirm" => ActionType::Externalconfirm,
                "conditiononapikeygroup" => ActionType::Conditiononapikeygroup,
                "createapikeyrecord" => ActionType::Createapikeyrecord,
                "votetrigger" => ActionType::Votetrigger,
                "reputationlock" => ActionType::Reputationlock,
                "tagschemawithapikey" => ActionType::Tagschemawithapikey,
                "multiconditiontimelock" => ActionType::Multiconditiontimelock,
                "webtasktrigger" => ActionType::Webtasktrigger,
                "triggerwebhook" => ActionType::Triggerwebhook,
                "biometricunlock" => ActionType::Biometricunlock,
                "appbuy" => ActionType::Appbuy,
                "appsell" => ActionType::Appsell,
                "appswap" => ActionType::Appswap,
                "fixedintervalbuy" => ActionType::Fixedintervalbuy,
                "fixedintervalsell" => ActionType::Fixedintervalsell,
                "conditionalsell" => ActionType::Conditionalsell,
                "conditionalbuy" => ActionType::Conditionalbuy,
                "create_fungible_app_token" => ActionType::Createfungibleapptoken,
                "create_nonfungible_app_token" => ActionType::Createnonfungibleapptoken,
                "create_token_liquidity_pot" => ActionType::Createtokenliquiditypot,
                "create_balance_liquidity_pot" => ActionType::Createbalanceliquiditypot,
                "create_app_liquidity_pot" => ActionType::Createappliquiditypot,
                "create_decentralized_exchange_app" => ActionType::Createdecentralizedexchangeapp,
                "create_centralized_exchange_app" => ActionType::Createcentralizedexchangeapp,
                "numerous_owners_equal" => ActionType::Numerousownersequal,
                "numerous_owners_varied" => ActionType::Numerousownersvaried,
                "cancel_condition" => ActionType::Cancelcondition,
                "internal_read" => ActionType::Internalread,
                "copy" => ActionType::Copy,
                "paste" => ActionType::Paste,
                _ => ActionType::Unknown,
            }
        }
    }

    pub struct Action {
        pub action_type: ActionType,
        pub sender: String,
        pub receiver: Option<String>,
        pub amount: u64,
    }

    pub fn execute_action(action: &Action, ledger: &mut HashMap<String, (u64, u64)>) {
        match action.action_type {
            ActionType::Batchsend => batchsend::execute(action, ledger),
            ActionType::Burn => burn::execute(action, ledger),
            ActionType::Callapp => callapp::execute(action, ledger),
            ActionType::Compute => compute::execute(action, ledger),
            ActionType::Condition => condition::execute(action, ledger),
            ActionType::Conditionvaultlock => conditionvaultlock::execute(action, ledger),
            ActionType::Conditionlock => conditionlock::execute(action, ledger),
            ActionType::Createapp => createapp::execute(action, ledger),
            ActionType::Createappbalance => createappbalance::execute(action, ledger),
            ActionType::Createcustomnativewalletbalance => createcustomnativewalletbalance::execute(action, ledger),
            ActionType::Createdilithium3signature => createdilithium3signature::execute(action, ledger),
            ActionType::Createdilithium5signature => createdilithium5signature::execute(action, ledger),
            ActionType::Createdummywallet => createdummywallet::execute(action, ledger),
            ActionType::Createhtlc => createhtlc::execute(action, ledger),
            ActionType::Createkey => createkey::execute(action, ledger),
            ActionType::Createnativeadawalletbalance => createnativeadawalletbalance::execute(action, ledger),
            ActionType::Createnativebtcwalletbalance => createnativebtcwalletbalance::execute(action, ledger),
            ActionType::Createnativeethwalletbalance => createnativeethwalletbalance::execute(action, ledger),
            ActionType::Createnativesolwalletbalance => createnativesolwalletbalance::execute(action, ledger),
            ActionType::Createnativesuiwalletbalance => createnativesuiwalletbalance::execute(action, ledger),
            ActionType::Createsha256hash => createsha256hash::execute(action, ledger),
            ActionType::Createsha3hash => createsha3hash::execute(action, ledger),
            ActionType::Declareschema => declareschema::execute(action, ledger),
            ActionType::Decryptwithkey => decryptwithkey::execute(action, ledger),
            ActionType::Delete => delete::execute(action, ledger),
            ActionType::Emitevent => emitevent::execute(action, ledger),
            ActionType::Encryptwithexistingkey => encryptwithexistingkey::execute(action, ledger),
            ActionType::Encryptwithnewkey => encryptwithnewkey::execute(action, ledger),
            ActionType::Externaldataread => externaldataread::execute(action, ledger),
            ActionType::Externaldatasend => externaldatasend::execute(action, ledger),
            ActionType::Getkeyvalue => getkeyvalue::execute(action, ledger),
            ActionType::Grantaccess => grantaccess::execute(action, ledger),
            ActionType::Logstate => logstate::execute(action, ledger),
            ActionType::Match => match::execute(action, ledger),
            ActionType::Mint => mint::execute(action, ledger),
            ActionType::Parallellink => parallellink::execute(action, ledger),
            ActionType::Partialvaultunlock => partialvaultunlock::execute(action, ledger),
            ActionType::Randomize => randomize::execute(action, ledger),
            ActionType::Reflectvalue => reflectvalue::execute(action, ledger),
            ActionType::Revokeaccess => revokeaccess::execute(action, ledger),
            ActionType::Send => send::execute(action, ledger),
            ActionType::Sendmessage => sendmessage::execute(action, ledger),
            ActionType::Sequencelink => sequencelink::execute(action, ledger),
            ActionType::Storekeyvalue => storekeyvalue::execute(action, ledger),
            ActionType::Swap => swap::execute(action, ledger),
            ActionType::Time => time::execute(action, ledger),
            ActionType::Timedvaultlock => timedvaultlock::execute(action, ledger),
            ActionType::Timelock => timelock::execute(action, ledger),
            ActionType::Triggercustomnativewalletbalance => triggercustomnativewalletbalance::execute(action, ledger),
            ActionType::Triggernativeadawalletbalance => triggernativeadawalletbalance::execute(action, ledger),
            ActionType::Triggernativebtcwalletbalance => triggernativebtcwalletbalance::execute(action, ledger),
            ActionType::Triggernativeethwalletbalance => triggernativeethwalletbalance::execute(action, ledger),
            ActionType::Triggernativesolwalletbalance => triggernativesolwalletbalance::execute(action, ledger),
            ActionType::Triggernativesuiwalletbalance => triggernativesuiwalletbalance::execute(action, ledger),
            ActionType::Unlockhtlc => unlockhtlc::execute(action, ledger),
            ActionType::Update => update::execute(action, ledger),
            ActionType::Updateappbalance => updateappbalance::execute(action, ledger),
            ActionType::Vault => vault::execute(action, ledger),
            ActionType::Vaultunlock => vaultunlock::execute(action, ledger),
            ActionType::Verifydilithium3signature => verifydilithium3signature::execute(action, ledger),
            ActionType::Verifydilithium5signature => verifydilithium5signature::execute(action, ledger),
            ActionType::Verifyexternaldata => verifyexternaldata::execute(action, ledger),
            ActionType::Verifysha256hash => verifysha256hash::execute(action, ledger),
            ActionType::Verifysha3hash => verifysha3hash::execute(action, ledger),
            ActionType::Walletlinked => walletlinked::execute(action, ledger),
            ActionType::Watch => watch::execute(action, ledger),
            ActionType::Pinschema => pinschema::execute(action, ledger),
            ActionType::Applaunch => applaunch::execute(action, ledger),
            ActionType::Statesnapshot => statesnapshot::execute(action, ledger),
            ActionType::Crosschainbundle => crosschainbundle::execute(action, ledger),
            ActionType::Confirmtxinchain => confirmtxinchain::execute(action, ledger),
            ActionType::Paywallunlock => paywallunlock::execute(action, ledger),
            ActionType::Percenttokensplit => percenttokensplit::execute(action, ledger),
            ActionType::Holdingtokensplit => holdingtokensplit::execute(action, ledger),
            ActionType::Schemavote => schemavote::execute(action, ledger),
            ActionType::Trustgrouptrigger => trustgrouptrigger::execute(action, ledger),
            ActionType::Failover => failover::execute(action, ledger),
            ActionType::Maxuseschema => maxuseschema::execute(action, ledger),
            ActionType::Expiryschema => expiryschema::execute(action, ledger),
            ActionType::Loopwhile => loopwhile::execute(action, ledger),
            ActionType::Delay => delay::execute(action, ledger),
            ActionType::Schemagrantaccess => schemagrantaccess::execute(action, ledger),
            ActionType::Schemagroup => schemagroup::execute(action, ledger),
            ActionType::Externalconfirm => externalconfirm::execute(action, ledger),
            ActionType::Conditiononapikeygroup => conditiononapikeygroup::execute(action, ledger),
            ActionType::Createapikeyrecord => createapikeyrecord::execute(action, ledger),
            ActionType::Votetrigger => votetrigger::execute(action, ledger),
            ActionType::Reputationlock => reputationlock::execute(action, ledger),
            ActionType::Tagschemawithapikey => tagschemawithapikey::execute(action, ledger),
            ActionType::Multiconditiontimelock => multiconditiontimelock::execute(action, ledger),
            ActionType::Webtasktrigger => webtasktrigger::execute(action, ledger),
            ActionType::Triggerwebhook => triggerwebhook::execute(action, ledger),
            ActionType::Biometricunlock => biometricunlock::execute(action, ledger),
            ActionType::Appbuy => appbuy::execute(action, ledger),
            ActionType::Appsell => appsell::execute(action, ledger),
            ActionType::Appswap => appswap::execute(action, ledger),
            ActionType::Fixedintervalbuy => fixedintervalbuy::execute(action, ledger),
            ActionType::Fixedintervalsell => fixedintervalsell::execute(action, ledger),
            ActionType::Conditionalsell => conditionalsell::execute(action, ledger),
            ActionType::Conditionalbuy => conditionalbuy::execute(action, ledger),
            ActionType::Createfungibleapptoken => create_fungible_app_token::execute(action, ledger),
            ActionType::Createnonfungibleapptoken => create_nonfungible_app_token::execute(action, ledger),
            ActionType::Createtokenliquiditypot => create_token_liquidity_pot::execute(action, ledger),
            ActionType::Createbalanceliquiditypot => create_balance_liquidity_pot::execute(action, ledger),
            ActionType::Createappliquiditypot => create_app_liquidity_pot::execute(action, ledger),
            ActionType::Createdecentralizedexchangeapp => create_decentralized_exchange_app::execute(action, ledger),
            ActionType::Createcentralizedexchangeapp => create_centralized_exchange_app::execute(action, ledger),
            ActionType::Numerousownersequal => numerous_owners_equal::execute(action, ledger),
            ActionType::Numerousownersvaried => numerous_owners_varied::execute(action, ledger),
            ActionType::Cancelcondition => cancel_condition::execute(action, ledger),
            ActionType::Internalread => internal_read::execute(action, ledger),
            ActionType::Copy => copy::execute(action, ledger),
            ActionType::Paste => paste::execute(action, ledger),
            ActionType::Unknown => println!("Unknown schema logic: {:?}", action.action_type),
        }
    }
}
// [INJECTED - SCHEMA OPTIONAL MODE]
pub fn execute_schema_if_exists(schema_id: Option<&str>, input: &serde_json::Value) -> bool {
    if let Some(id) = schema_id {
        println!("[Validator] Executing schema logic for: {}", id);
        return true; // Actual logic here
    }
    println!("[Validator] No schema provided, accepting raw input.");
    true
}